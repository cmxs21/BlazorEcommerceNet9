@page "/order/details/{Id:int}"
@using System.Globalization
@using BlazorEcommerce.Utility
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IOrderRepository _orderRepository
@inject IJSRuntime _JS
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <div class="card" style="max-width: 750px;">
            <div class="pt-3 text-success text-center">
                <span class="h4"> ORDER DETAILS</span>
            </div>

            <hr />
            <div class="px-3">
                <p>Order Id: @OrderHeader?.Id</p>
                <p>Name: @OrderHeader?.Name</p>
                <p>Email: @OrderHeader?.Email</p>
                <p>Phone: @OrderHeader?.PhoneNumber</p>
                <p>Order Status:  @OrderHeader?.OrderStatus</p>
            </div>
            <hr />
            <div class="card-body">
                <h4 class="text-success">Menu Items</h4>

                @foreach (var item in OrderHeader.OrderDetails)
                {
                    <div class="d-flex">
                        <div class="d-flex w-100 justify-content-between">
                            <p>
                                &nbsp; -- @item.Product.Name
                            </p>
                            <p>
                                @item.Price.ToString("C", CultureInfo.GetCultureInfo("en-us")) x @item.Count =
                            </p>
                        </div>
                        <div class="ps-4">
                            @((item.Price * item.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                        </div>
                    </div>
                }

                <hr />
                <h4 class="text-success text-end">
                    @OrderHeader?.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                </h4>
                <hr />

                <div class="row">
                    <div class="col-5">
                        <NavLink href="order/list" class="btn btn-secondary  m-2 p-2" style="width:150px;">Back to Orders</NavLink>
                    </div>
                    <div class="col-7 text-end">
                        @if (OrderHeader?.OrderStatus != StaticDetails.StatusCancelled && OrderHeader?.OrderStatus != StaticDetails.StatusCompleted 
                                && _authenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole(StaticDetails.RoleAdmin) == true // Only admin can change order status
                        )
                        {
                            <button class="btn btn-danger m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(StaticDetails.StatusCancelled)">
                                Cancell Order
                            </button>
                            @if (OrderHeader?.OrderStatus == StaticDetails.StatusPending || OrderHeader?.OrderStatus == StaticDetails.StatusApproved)
                            {
                                <button class="btn btn-primary m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(StaticDetails.StatusReadyForPickUp)">
                                    Ready for Pickup
                                </button>
                            }
                            @if (OrderHeader?.OrderStatus == StaticDetails.StatusReadyForPickUp)
                            {
                                <button class="btn btn-success m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(StaticDetails.StatusCompleted)">
                                    Completed
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    [Parameter]
    public int Id { get; set; }
    public OrderHeader? OrderHeader = null;

    //Better method for loading data
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrder();
            IsProcessing = false;
            StateHasChanged(); // Trigger a re-render to show the loaded data
        }
    }

    private async Task LoadOrder()
    {
        OrderHeader = await _orderRepository.GetAsync(Id);
    }

    private async Task UpdateStatus(string newStatus)
    {
        if (OrderHeader != null)
        {
            await _orderRepository.UpdateStatusAsync(Id, newStatus, "");
            await _JS.ToastrSuccess("Status updated successfully to " + newStatus);
        }
    }
}
