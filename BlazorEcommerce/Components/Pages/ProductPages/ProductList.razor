@page "/product"
@using System.Globalization
@inject IProductRepository _productRepository
@inject IJSRuntime _JS
@inject IWebHostEnvironment _env

<BsModal OnModalConfirmation="ConfirmedDelete"
    ButtonBootstrapStyle="btn-danger" 
    ConfirmButtonText="Delete" 
    Title="Please Confirm"
    Body="Are you sure you want to delete this product?"></BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
} 
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h4 class="text-white py-2">Product List</h4>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <NavLink href="product/create" class="btn btn-lg btn-secondary" style="width:250px;"><i class="bi bi-plus-square"></i> New Product</NavLink>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead class="bg-black bg-gradient text-white">
                        <tr>
                            <th style="width:5%;">#</th>
                            <th style="width:15%;">Name</th>
                            <th style="width:10%;">Price</th>
                            <th style="width:20%;">Description</th>
                            <th style="width:10%;">Special Tag</th>
                            <th style="width:15%;">Image</th>
                            <th style="width:15%;">Category</th>
                            <th style="width:10%;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Products)
                        {
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>@product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</td>
                                <td>@((MarkupString)product.Description)</td>
                                <td><span class="badge text-bg-info">@product.SpecialTag</span></td>
                                <td>
                                    @if (!string.IsNullOrWhiteSpace(product.ImageUrl))
                                    {
                                        <img src="@($"/images/product/{product.ImageUrl}")" alt="Image" style="max-width:60px;max-height:60px;" />
                                    }
                                </td>
                                <td>@product.Category?.Name</td>
                                <td>
                                    <NavLink class="btn btn-sm btn-primary me-2" href=@($"product/update/{product.Id}")>
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </NavLink>
                                    <NavLink class="btn btn-sm btn-danger" @onclick="() => HandleDelete(product.Id)">
                                        <i class="bi bi-trash3"></i> Delete
                                    </NavLink>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">
                    No products available.
                </div>
            }
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Product> Products { get; set; } = new List<Product>();
    private int DeleteProductId { get; set; } = 0;

    //This method for loading data is not recommended because it can cause performance issues because of double rendering.
    // protected override async Task OnInitializedAsync()
    // {
    //     IsProcessing = true;
    //     await LoadProducts();
    //     IsProcessing = false;
    // }

    //Better method for loading data
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged(); // Trigger a re-render to show the loaded data
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _JS.InvokeVoidAsync("ModalConfirmationShow");
    }

    private async Task ConfirmedDelete(bool isConfirmed)
    {
        IsProcessing = true;
        
        if (isConfirmed && DeleteProductId > 0)
        {
            // Obtener el producto para saber qué imagen tiene
            var product = await _productRepository.GetAsync(DeleteProductId);
            
            var result = await _productRepository.DeleteAsync(DeleteProductId);
            if (result)
            {
                // Si el producto tenía imagen, borrarla del servidor
                if (product != null && !string.IsNullOrEmpty(product.ImageUrl))
                {
                    var imagePath = Path.Combine(_env.WebRootPath, "images", "product", product.ImageUrl);
                    if (File.Exists(imagePath))
                    {
                        File.Delete(imagePath);
                    }
                }

                await LoadProducts();
                await _JS.ToastrSuccess("Product deleted successfully.");
                StateHasChanged();
            }
            else
            {
                await _JS.ToastrError("Error deleting product.");
            }
            await _JS.InvokeVoidAsync("ModalConfirmationHide");
        }
        DeleteProductId = 0;
        IsProcessing = false;
    }
}
